[
  {
    "objectID": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html",
    "href": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html",
    "title": "(draft) OpenAI - Intro to Fine-Tuning Models",
    "section": "",
    "text": "First I’d like to say that I am not a Data Scientist. I’ve worked with a few Data Scientists in the past, but my knowledge in the space is limited. With the advent of high-quality large language models (LLMs), software engineers like me can now do Data Science with little-to-no Data Science background.\nIn this post, I’m going to discuss my learnings around fine-tuning OpenAI GPT models. As an example, I’ll use my work on BeepGPT, where I fine-tuned a model to predict which conversations might be interesting to users of a Slack workspace.\nWe’ll cover the following topics in detail below:\n\nBuilding Training Examples\nRefining Training Examples\nModel Fine-Tuning\nModel Validation\n\n\n\nFirst is a willingness to experiment. Model fine-turing is an iterative process. Most likely the first way you will build your training examples will not produce a successful model. When working on BeepGPT I experimented with five different scenarios (over a week) before I found one that was successful at predicting user interest.\nSecond is the importance of data quality. When fine-tuning a model, numerous training examples are sent to a model to update its behavior. The examples must contain strong signals that relate to the desired output. Despite the major advances made recently with LLMs, garbage in still leads to garbage out.\nFinally it is important to have many training examples. Ideally a fine tuning job should be run with at least a few thousand training examples. The more examples that you can provide to the model, the more it can learn, and the better the predictions will be in production."
  },
  {
    "objectID": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#intro",
    "href": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#intro",
    "title": "(draft) OpenAI - Intro to Fine-Tuning Models",
    "section": "",
    "text": "First I’d like to say that I am not a Data Scientist. I’ve worked with a few Data Scientists in the past, but my knowledge in the space is limited. With the advent of high-quality large language models (LLMs), software engineers like me can now do Data Science with little-to-no Data Science background.\nIn this post, I’m going to discuss my learnings around fine-tuning OpenAI GPT models. As an example, I’ll use my work on BeepGPT, where I fine-tuned a model to predict which conversations might be interesting to users of a Slack workspace.\nWe’ll cover the following topics in detail below:\n\nBuilding Training Examples\nRefining Training Examples\nModel Fine-Tuning\nModel Validation\n\n\n\nFirst is a willingness to experiment. Model fine-turing is an iterative process. Most likely the first way you will build your training examples will not produce a successful model. When working on BeepGPT I experimented with five different scenarios (over a week) before I found one that was successful at predicting user interest.\nSecond is the importance of data quality. When fine-tuning a model, numerous training examples are sent to a model to update its behavior. The examples must contain strong signals that relate to the desired output. Despite the major advances made recently with LLMs, garbage in still leads to garbage out.\nFinally it is important to have many training examples. Ideally a fine tuning job should be run with at least a few thousand training examples. The more examples that you can provide to the model, the more it can learn, and the better the predictions will be in production."
  },
  {
    "objectID": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#definitions",
    "href": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#definitions",
    "title": "(draft) OpenAI - Intro to Fine-Tuning Models",
    "section": "Definitions",
    "text": "Definitions\nHere are a few concepts that you should understand before continuing…\n\nTokens\nOpenAI’s models process text as tokens instead of as characters. Tokens represent sets of characters that commonly occur in a certain sequence. On average, a token represents about four characters. You can use OpenAI’s tokenizer tool to see how different texts get converted into tokens, for example:\n\n\nTeam did you enjoy the nachos yesterday?\n\nThe color highlighting shows how 41 characters becomes 10 tokens.\nYou can mouseover to see the actual token values.\n\nCommon words and most positive integers under 1000 equate to a single token. Whitespace and capitalization matter.  Team,  team, Team, and team equate to 4 different tokens.\n\n\nPrompts & Completions\nPrompts are the input to LLM models. When working with ChatGPT, the prompt is the question we ask the model.\nCompletions are the responses from LLM models. When working with ChatGPT, the completion is the model’s answer to our question.\n\n\nTraining Examples\nTraining examples are prompt & completion pairs. The prompt is the text we would have sent the model in production, and the completion is the response we would have expected back.\n\n\nMaximum Token Length\nThe maximum length of an API request to a model, in tokens. This includes both the prompt and completion. Depending on the model, there is a different maximum length. For fine-tuning, we need to make sure that each training example is less than this size."
  },
  {
    "objectID": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#building-training-examples",
    "href": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#building-training-examples",
    "title": "(draft) OpenAI - Intro to Fine-Tuning Models",
    "section": "Building Training Examples",
    "text": "Building Training Examples\n\nHypothesis generation\nBefore we start building training examples, you need to form hypotheses about what you want to predict and how you might do so successfully. This is where the iterative process starts.\nFor BeepGPT I experimented with the following ideas:\n\nFor a set of recent messages in a channel, try to predict:\n\nThe reaction (if any) to the most recent message\nThe next user that will reply\nThe set of users that might interact next (reply or react)\n\nFor the set of recent messages in a conversation, try to predict:\n\nThe set of users that might interact next\nThe next user that will reply\n\n\nI was most successful at fine-tuning a model for the final idea: For the set of recent messages in a conversation, predict the next user to reply. The rest of the post will focus on this.\n\n\n\n\n\n\nTip\n\n\n\nI used Kaskada to quickly iterate on these ideas. Kaskada is a tool that makes it easy to collect and aggregate events from raw data. You don’t need to pre-process anything. Just import the raw events and start experimenting. Furthermore Kaskada ensures that your examples will not be subject to leakage, which is a big problem in predictive modeling. In a future post, I’ll show how I used Kaskada to generate training examples for each of the ideas presented above.\n\n\n\n\nConsider this example conversation:\n\nUserA: Team did you enjoy the nachos yesterday?\nUserB: Yes, I love mexican food.\nUserA: &lt;(UserC?)&gt; I’m trying to get my application deployed in Kubernetes. However, I can’t seem to figure out if I should use a deployment or a stateful set. I found some docs here: http://tinyurl.com/4k53dc8h but I’m still not sure which to choose. Can you help?\nUserB: UserC is at lunch now. They will be back in about an hour. I don’t know much about this either, but I can try to help. Or is it okay to wait until UserC is back?\nUserA: I can wait for UserC to get back.\nUserC: I can help with this. Can you tell me more about your application? Does it have any persistent storage requirements?\n\n\n\nTraining example construction\nIf we just look at the first two messages, we can generate a training example. The prompt is the first message, and the completion is the user that responded.\n\nPrompt: “Team did you enjoy the nachos yesterday?”\nCompletion: “UserB”\n\nInstead if we consider the last 4 messages (we use two new-line characters to join messages):\n\nPrompt: “&lt;(UserC?)&gt; I’m trying to get my application deployed in Kubernetes. However, I can’t seem to figure out if I should use a deployment or a stateful set. I found some docs here: http://tinyurl.com/4k53dc8h but I’m still not sure which to choose. Can you help?is at lunch now. They will be back in about an hour. I don’t know much about this either, but I can try to help. Or is it okay to wait until UserC is back?can wait for UserC to get back.”\nCompletion: “UserC”\n\nThe combination of the prompt and the completion is a training example. When using the OpenAI fine-tuning API, each training example should be a blob of json in a specific format on a single line.\nConverting our two examples above, we now have:\n{\"prompt\":\"Team did you enjoy the nachos yesterday?\", \"completion\":\"UserB\"}\n{\"prompt\":\"&lt;@UserC&gt; I'm trying to get my application deployed in Kubernetes. However, I can't seem to figure out if I should use a deployment or a stateful set. I found some docs here: http://tinyurl.com/4k53dc8h but I'm still not sure which to choose. Can you help?\\n\\nUserC is at lunch now. They will be back in about an hour. I don't know much about this either, but I can try to help. Or is it okay to wait until UserC is back?\\n\\nI can wait for UserC to get back.\", \"completion\":\"UserC\"}\n\n\nFormatting examples\nNext, there are several formatting rules that you are recommended to follow. I don’t understand why these are recommended but I followed them anyway.\n\nAll prompts should end with the same set of characters. The set of characters used should not occur elsewhere in your dataset. The recommended string for textual input data is \\n\\n###\\n\\n.\nAll completions should start with a single whitespace character.\n\nApplying these rules to our examples, we get:\n{\"prompt\":\"Team did you enjoy the nachos yesterday?\\n\\n###\\n\\n\", \"completion\":\" UserB\"}\n{\"prompt\":\"&lt;@UserC&gt; I'm trying to get my application deployed in Kubernetes. However, I can't seem to figure out if I should use a deployment or a stateful set. I found some docs here: http://tinyurl.com/4k53dc8h but I'm still not sure which to choose. Can you help?\\n\\nUserC is at lunch now. They will be back in about an hour. I don't know much about this either, but I can try to help. Or is it okay to wait until UserC is back?\\n\\nI can wait for UserC to get back.\\n\\n###\\n\\n\", \"completion\":\" UserC\"}\n\n\nTraining example cleanup\nFinally I found that model training works best if the following is done:\n\nNon-textual data like http-links, code blocks, and ids are removed from the prompts.\nCompletions are reduced to a single token in length.\n\nWe can use regex and other string functions to remove non-textual data from the prompts. And we can use standard data science tools like the Scikit-Learn LabelEncoder to create a mapping from UserIds to integers. Remember that positive integers under one thousand map to unique tokens in OpenAI.\nSo now we have:\n{\"prompt\":\"Team did you enjoy the nachos yesterday?\\n\\n###\\n\\n\", \"completion\":\" 1\"}\n{\"prompt\":\"I'm trying to get my application deployed in Kubernetes. However, I can't seem to figure out if I should use a deployment or a stateful set. I found some docs here: but I'm still not sure which to choose. Can you help?\\n\\nUserC is at lunch now. They will be back in about an hour. I don't know much about this either, but I can try to help. Or is it okay to wait until UserC is back?\\n\\nI can wait for UserC to get back.\\n\\n###\\n\\n\", \"completion\":\" 2\"}\n\n\n\n\n\n\nImportant\n\n\n\nI found that removing ids was especially important. Before I did so, the model essentially learned how to map from input UserId to output user. It skipped learning anything useful from the actual text of the messages.\n\n\nWe now have 2 training examples that we could use for fine-tuning a model.\nFor fine-tuning we should have several thousand examples. Using a tool like Kaskada, it should be relatively easy to generate examples like this from your full slack history."
  },
  {
    "objectID": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#refining-training-examples",
    "href": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#refining-training-examples",
    "title": "(draft) OpenAI - Intro to Fine-Tuning Models",
    "section": "Refining Training Examples",
    "text": "Refining Training Examples\nBefore proceeding with fine-tuning, I recommend the taking the following steps:\n\nUse the ChatCompletion API to determine which examples contain enough signal to be useful\nUse the OpenAI CLI to validate the training examples are in the correct format.\n\n\nDetermining Example Signal Strength\nI recommend you ensure each example contains a strong enough signal for predicting your desired outcome. If an example doesn’t have enough signal, you should consider excluding it from your training set.\nDepending on your goal, it may be also helpful to include some negative examples. Negative examples help train the model about when to not make a prediction, or stated another way, about when to predict that no action should be taken.\nFor example, with BeepGPT we are trying to predict when a set of messages might be interesting for a specific user. If we look at our training examples from the previous section, the first does not contain anything interesting. We would not want to alert anyone about this message. Therefore we should convert this example into a negative example.\nThe second example does contain a strong signal. Here we would like to alert users that have answered questions about kubernetes in the past. This example should be left as is.\nTo convert an example to a negative example, we simply need to change its completion to indicate a non-response. I chose to use  nil for this, which is represented by a single token in OpenAI.\n{\"prompt\":\"Team did you enjoy the nachos yesterday?\\n\\n###\\n\\n\", \"completion\":\" nil\"}\n{\"prompt\":\"I'm trying to get my application deployed in Kubernetes. However, I can't seem to figure out if I should use a deployment or a stateful set. I found some docs here: but I'm still not sure which to choose. Can you help?\\n\\nUserC is at lunch now. They will be back in about an hour. I don't know much about this either, but I can try to help. Or is it okay to wait until UserC is back?\\n\\nI can wait for UserC to get back.\\n\\n###\\n\\n\", \"completion\":\" 2\"}\nInstead of manually going through each generated example to determine if it should be positive or negative, we can use OpenAIs ChatGPT API to do this work for us. However we still need to review a few examples in order to provide enough information to the ChatGPT to make decisions on our behalf.\nLook through your generated examples and try to find 25-50 for each bucket: positive and negative. Add these to files: examples_pos.jsonl and examples_neg.jsonl\nPositive (strong signal) examples:\n\nI’ve been utilizing the Rust syntax highlighter for my code blocks. It does a good job of differentiating between functions and literals.\nThe agent doesn’t push to prometheus, this is just another proxy location that prometheus scrapes.\n\nNegative (weak signal) examples:\n\nSome very interesting ideas in here, thx for sharing\nWere there any issues with this? I’ll start verifying a few things in a bit.\nStandup?\n\nWe will now use ChatGPT with few-shot learning to iterate over our full set of training examples and label each as positive or negative.\nFirst we will generate an instruction set for ChatGPT, by building up an array of messages in json. Each message object contains role and content properties. The role can be either system, user, or assistant.\nThe first message should always be from the system role, and provide general instructions to the model of its function. Following this, message pairs of user and assistant should be added, where the user content is our example input and the assistant content is our expected response from ChatGPT. These are the “few-shot” learnings that ChatGPT uses to help it determine our desired output.\nThen we append a final user message to the instruction set that contains the content that we want to have evaluated by the model.\nBelow is some example python code for doing this refinement. Some Notes:\n\nThe code is written in blocks with the intention of running inside a jupyter notebook environment.\nIf you want to run this code yourself, you will need an OpenAI API key.\nThe code also assumes that you have a file named examples.jsonl which contains the full set of training examples generated above.\n\n\n\nCode\n#install required packages\n%pip install backoff numpy openai pandas scikit-learn\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that we use the backoff library to retry requests that have failed due to a rate-limit error. Despite this addition, sometimes the process stalls and must be manually restarted. The code below appends to the output file instead of replacing it, so that the process can be restarted after an error occurs.\n\n\n\n\nCode\n# import packages and init openAI with your API key\nimport backoff, getpass, json, numpy, openai, pandas, sklearn, time\n\nopenai.api_key = getpass.getpass('OpenAI API Key:')\n\n\n\n\nCode\n# get a total count of examples in the input file\ntotal_count = 0\nwith open(f'examples.jsonl', 'r') as in_file:\n    for line in in_file:\n        total_count += 1\n\n# initialize a progress counter\nsuccess_count = 0\n\n# build up the instruction set for few-shot learning\n\n# start with a `system` message that provides the general instructions to the model\nsystem_instructions = \"You are a helpful assistant. Your job is to determine \\\n    if a prompt will be helpful for fine-tuning a model. All prompts start with \\\n    'start --&gt;' and end with: '\\\\n\\\\n###\\\\n\\\\n'. You should respond 'yes' if you \\\n    think the prompt has enough context to be helpful, or 'no' if not. No \\\n    explanation is needed. You should only respond with 'yes' or 'no'.\"\ninstructions = [{\"role\": \"system\", \"content\": system_instructions}]\n\n# then add the positive and negative examples that we manually pulled out of the full set\npos = open(f'examples_pos.jsonl', 'r')\nneg = open(f'examples_neg.jsonl', 'r')\n\nwhile True:\n    pos_line = pos.readline()\n    neg_line = neg.readline()\n\n    if (not pos_line) or (not neg_line):\n        break\n\n    pos_data = json.loads(pos_line)\n    neg_data = json.loads(neg_line)\n\n    # alternate adding positive and negative examples\n    instructions.append({\"role\": \"user\", \"content\": f'start --&gt;{pos_data[\"prompt\"]}'})\n    instructions.append({\"role\": \"assistant\", \"content\": \"yes\"})\n    instructions.append({\"role\": \"user\", \"content\": f'start --&gt;{neg_data[\"prompt\"]}'})\n    instructions.append({\"role\": \"assistant\",\"content\": \"no\"})\n\npos.close()\nneg.close()\n\n# setup a method to retry requests automatically\n@backoff.on_exception(backoff.expo, (openai.error.RateLimitError, openai.error.ServiceUnavailableError))\ndef chat_with_backoff(**kwargs):\n    # add an additional delay, because the first retry almost always fails\n    time.sleep(1)\n    try:\n        return openai.ChatCompletion.create(**kwargs)\n    except openai.error.InvalidRequestError:\n        return None\n\n\n\n\nCode\n# iterate through each example, using the ChatCompletion API \n# to determine if it contains a strong signal for fine-tuning purposes.\n# if this code block stalls, you can restart it to resume processing. \n\ncount = 0\nwith open(f'examples.jsonl', 'r') as in_file:\n    with open(f'examples_refined.jsonl', 'a') as out_file\n        for line in in_file:\n            count +=1\n\n            # skip examples already processed on previous runs\n            if count &lt; success_count:\n                continue\n\n            print(f'Currently processing line {count} of {total_count}')\n\n            # get the next example from the file\n            data = json.loads(line)\n            prompt = data[\"prompt\"]\n\n            # add the example to a copy of the instruction set\n            msgs = instructions.copy()\n            msgs.append({\"role\": \"user\", \"content\": f'start --&gt;{prompt}'})\n\n            # send the request\n            res = chat_with_backoff(model = \"gpt-3.5-turbo\", messages = msgs)\n\n            # if request failed for some reason, skip example\n            if not res:\n                continue\n\n            # get the response and write the example back to disk\n            if res[\"choices\"][0][\"message\"][\"content\"] == \"no\":\n                # for negative messages, re-write the completion as ` nil`\n                data[\"completion\"] = \" nil\"\n            out_file.write(json.dumps(data) + '\\n') \n            out_file.flush()\n\n            # save progress for restart\n            success_count = count\n\n\n\n\n\n\n\n\nTips & Warnings\n\n\n\n\nIf you get an error about too many tokens used, reduce the number of positive and negative examples in your generated instructions. Or try to summarize the positive & negative examples (manually or with ChatGPT) to reduce their length.\nThis will cost a fair amount on OpenAI. A rough estimate is $50 per 10,000 examples.\nThis can take a long time to run to completion. The ChatCompletion API limits the number of tokens used per minute. In my experience, running 10,000 examples through this process takes about 8 hours.\n\n\n\n\n\nExample Validation\nFinally, will use a CLI tool provide by OpenAI to perform some validation on our training examples and split them into two files. The tool does the following for us:\n\nmakes sure all prompts end with same suffix\nremoves examples that use too many tokens\nremoves duplicated examples\n\nWe can run the CLI tool directly from a python jupyter environment with the code below.\n\n\nCode\nfrom openai import cli\nfrom types import SimpleNamespace\n\nargs = SimpleNamespace(file='examples_refined.jsonl', quiet=True)\ncli.FineTune.prepare_data(args)\n\n\nThe output of the above command should be two files:\n\nexamples_refined_prepared_train.jsonl -&gt; We will use this to fine-tune our model\nexamples_refined_prepared_valid.jsonl -&gt; We will use this to validate our fine-tuned model"
  },
  {
    "objectID": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#model-fine-tuning",
    "href": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#model-fine-tuning",
    "title": "(draft) OpenAI - Intro to Fine-Tuning Models",
    "section": "Model Fine-Tuning",
    "text": "Model Fine-Tuning\nNow that we have refined training examples, we can fine-tune a model for our purposes.\nTo do this, we take the following steps:\n\nUpload training data\nCreate a fine-tuning job\nWait for the job to finish\nExperiment with the fine-tuned model\n\n\nUpload training data\nFirst we upload the refined examples to OpenAI. We need to make sure the file has successfully uploaded before moving onto the next step.\n\n\nCode\ntraining_file_name = \"examples_refined_prepared_train.jsonl\"\n\n# start the file upload\ntraining_file_id = cli.FineTune._get_or_upload(training_file_name, True)\n\n# Poll and display the upload status until the it finishes\nwhile True:\n    time.sleep(2)\n    file_status = openai.File.retrieve(training_file_id)[\"status\"]\n    print(f'Upload status: {file_status}')\n    if file_status in [\"succeeded\", \"failed\", \"processed\"]:\n        break\n\n\n\n\nCreate a fine-tuning job\nNext we create a fine-tuning job using the file_id from the upload.\nWhen doing fine-tuning, you need to choose a base model to start from. The current options are:\n\nbabbage-002 -&gt; Capable of straightforward tasks. Very fast and low cost.\ndavinci-002 -&gt; Most capable GPT3 model. More expensive to train and run in production.\n\nYou also need to choose the number of epochs to train the model for. An epoch refers one full cycle through the training dataset.\nWith the example set I was using for BeepGPT I found that 8 epochs on babbage-002 produced a model with a similar capability as 4 on davinci-002. Depending on your use case you may or may not have a similar result.\n\n\nCode\ncreate_args = {\n    \"training_file\": training_file_id,\n    \"model\": \"davinci-002\",\n    \"n_epochs\": 4,\n    \"suffix\": \"beep-gpt\"\n}\n\n# Create the fine-tune job and retrieve the job ID\nresp = openai.FineTune.create(**create_args)\njob_id = resp[\"id\"]\n\n\n\n\nWait for the job to finish\nAfter the fine-tuning job has been created, we need to wait for it to start processing, and then for it to finish.\nDepending on the current backlog at OpenAI, I’ve seen that jobs can take up to a dozen hours to start.\nAfter the job starts successfully, you can then see its status, and wait for it to finish. This can also take a long time. When using davinci-002 with 4 epochs, I estimate about 1 hour per 1000 training examples.\n\n\nCode\n# Poll and display the fine-tuning status until the it finishes\nwhile True:\n    time.sleep(5)\n    job_details = openai.FineTune.retrieve(id=job_id)\n    \n    print(f'Job status: {job_details[\"status\"]}')\n    print(f'Job events: {job_details[\"events\"]}')\n\n    if job_details[\"status\"] == \"succeeded\":\n        model_id = job_details[\"fine_tuned_model\"]\n        print(f'Successfully fine-tuned model with ID: {model_id}')\n\n    if job_details[\"status\"] in [\"failed\", \"succeeded\"]:\n        break\n\n\n\n\nTry using the fine-tuned model\nNow that we have a finished model, we can try sending a few prompts and see if it recommends alerting any users. We can use the validation file for this.\nSee the OpenAI docs for info on the parameters we send to the Completion API.\n\n\nCode\n# choose which row in the validation file to send\nrow = 6\n\ncount = 0\nwith open(f'examples_refined_prepared_valid.jsonl', 'r') as in_file:\n    for line in in_file:\n        count +=1\n\n        if count &lt; row:\n            continue\n\n        data = json.loads(line)\n        prompt = data[\"prompt\"]\n        completion = data[\"completion\"]\n\n        # this is the text we send to the model for it to \n        # determine if we should alert a user\n        print(f'Prompt: {prompt}')\n\n        # this is the user (or nil) we would have expected \n        # for the response (from the validation file)\n        print(f'Completion: {completion}')\n\n        # this is the response from the model. The `text` field contains \n        # the actual prediction. The `logprobs` array contains the \n        # log-probability from the 5 highest potential matches.\n        print(f'Prediction:')\n        openai.Completion.create(model=model_id, prompt=prompt, max_tokens=1, logprobs=5, temperature=0)"
  },
  {
    "objectID": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#model-validation",
    "href": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#model-validation",
    "title": "(draft) OpenAI - Intro to Fine-Tuning Models",
    "section": "Model Validation",
    "text": "Model Validation\nIn order to validate your model, you can run it over the full validation data set.\n\n\nCode\nwith open(f'examples_refined_prepared_valid.jsonl', 'r') as in_file:\n    with open(f'examples_refined_prepared_valid_pred.jsonl', 'w') as out_file:\n        for line in in_file:\n            pred = openai.Completion.create(model=model_id, prompt=prompt, max_tokens=1, logprobs=5, temperature=0)\n            data[\"prediction\"] = pred\n            out_file.write(json.dumps(data) + '\\n') \n\n\nThen use a basic data science performance measurement to check the quality of your model. In the example below, I calculate the model’s F1 Score, but you can use other performance indicators if desired.\nA F1 score is a measure of a model’s accuracy, and it takes into account both precision and recall.\n\nPrecision is the number of true positive predictions divided by the total number of positive predictions. It measures how accurate the model’s positive predictions are.\nRecall is the number of true positive predictions divided by the total number of actual positive cases. It measures how well the model identifies positive cases.\n\nThe F1 score is the harmonic mean of precision and recall. F1 scores ranges from 0 to 1, with a score of 1 indicating perfect precision and recall and 0 indicating poor performance. As a general rule of thumb, an F1 score with 0.7 or higher is often considered good. (Neri Van Otten 2023)\n\n\nCode\ndf = pandas.read_json(f'examples_refined_prepared_valid_pred.jsonl', lines=True)\ndf[\"test\"] = None\ndf[\"pred\"] = None\n\nfor i in range(len(df)):\n    completions = df['completion'][i].strip().split()\n    df.at[i, \"test\"] = completions\n    prediction = df['prediction'][i]\n    if \"choices\" in prediction:\n        predictions = prediction[\"choices\"][0][\"text\"].strip().split()\n        df.at[i, \"pred\"] = predictions\ndf = df[df.pred.notnull()]\n\nfrom sklearn.preprocessing import MultiLabelBinarizer\nmlb = MultiLabelBinarizer()\nmlb.fit([['nil', '1', '2', '5', '10']])\ny_test_transformed = mlb.transform(df['test'])\ny_pred_transformed = mlb.transform(df['pred'])\n\nfrom sklearn.metrics import f1_score\nf1 = f1_score(y_test_transformed, y_pred_transformed, average='macro')  # Or 'micro', 'weighted' based on need\nf1"
  },
  {
    "objectID": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#conclusion-and-next-steps",
    "href": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#conclusion-and-next-steps",
    "title": "(draft) OpenAI - Intro to Fine-Tuning Models",
    "section": "Conclusion and Next Steps",
    "text": "Conclusion and Next Steps"
  },
  {
    "objectID": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#references",
    "href": "preview/openai-fine-tuning-1/openai-fine-tuning-1.html#references",
    "title": "(draft) OpenAI - Intro to Fine-Tuning Models",
    "section": "References",
    "text": "References\n\n\nNeri Van Otten. 2023. “F1 Score The Ultimate Guide: Formulas, Explanations, Examples, Advantages, Disadvantages, Alternatives & Python Code.” https://spotintelligence.com/2023/05/08/f1-score/."
  },
  {
    "objectID": "posts/000-first-notebook/first-notebook.html",
    "href": "posts/000-first-notebook/first-notebook.html",
    "title": "First Post",
    "section": "",
    "text": "Here is an example first post\nIn this notebook, I’ll do some things\n\nInstall some stuff\nWrite a script\nRun it\nShow a picture\n\nFirst lets install the libraries we will use below.\n\n\nCode\n%pip install pyfiglet\n\n\nCollecting pyfiglet\n  Downloading pyfiglet-0.8.post1-py2.py3-none-any.whl (865 kB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 865.8/865.8 kB 7.6 MB/s eta 0:00:00a 0:00:01\nInstalling collected packages: pyfiglet\nSuccessfully installed pyfiglet-0.8.post1\nNote: you may need to restart the kernel to use updated packages.\n\n\n\n\nCode\nimport pyfiglet\n\n# Text to be converted to ASCII art\ntext = \"First Post\"\n\n# Generate ASCII art\nascii_art = pyfiglet.figlet_format(text)\n\n# Print the ASCII art\nprint(ascii_art)\n\n\n _____ _          _     ____           _   \n|  ___(_)_ __ ___| |_  |  _ \\ ___  ___| |_ \n| |_  | | '__/ __| __| | |_) / _ \\/ __| __|\n|  _| | | |  \\__ \\ |_  |  __/ (_) \\__ \\ |_ \n|_|   |_|_|  |___/\\__| |_|   \\___/|___/\\__|\n                                           \n\n\n\n\n\n\nBunny"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "epinzur.github.io",
    "section": "",
    "text": "First Post\n\n\n\n\n\n\n\nbunny\n\n\n\n\n\n\n\n\n\n\n\nSep 6, 2023\n\n\nEric Pinzur\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  }
]